// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.0.5

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type BlogAdminServiceHTTPServer interface {
	CreateUser(context.Context, *CreateUserReq) (*CreateUserReply, error)
	DeleteUser(context.Context, *DeleteUserReq) (*DeleteUserReply, error)
	GetUserList(context.Context, *GetUserListReq) (*GetUserListReply, error)
	Login(context.Context, *LoginReq) (*LoginReply, error)
	Logout(context.Context, *LogoutReq) (*LogoutReply, error)
	Register(context.Context, *RegisterReq) (*RegisterReply, error)
	SearchUserByID(context.Context, *SearchUserByIDReq) (*SearchUserByIDReply, error)
	UpdateUser(context.Context, *UpdateUserReq) (*UpdateUserReply, error)
}

func RegisterBlogAdminServiceHTTPServer(s *http.Server, srv BlogAdminServiceHTTPServer) {
	r := s.Route("/")
	r.DELETE("/admin/user/delete/{id}", _BlogAdminService_DeleteUser0_HTTP_Handler(srv))
	r.GET("/admin/user/{id}", _BlogAdminService_SearchUserByID0_HTTP_Handler(srv))
	r.POST("/admin/user/add", _BlogAdminService_CreateUser0_HTTP_Handler(srv))
	r.PUT("/admin/user/{user.id}/update", _BlogAdminService_UpdateUser0_HTTP_Handler(srv))
	r.GET("/admin/user/list", _BlogAdminService_GetUserList0_HTTP_Handler(srv))
	r.POST("/admin/login", _BlogAdminService_Login0_HTTP_Handler(srv))
	r.POST("/admin/logout", _BlogAdminService_Logout0_HTTP_Handler(srv))
	r.POST("/admin/register", _BlogAdminService_Register0_HTTP_Handler(srv))
}

func _BlogAdminService_DeleteUser0_HTTP_Handler(srv BlogAdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteUserReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/blog.admin.v1.BlogAdminService/DeleteUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteUser(ctx, req.(*DeleteUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteUserReply)
		return ctx.Result(200, reply)
	}
}

func _BlogAdminService_SearchUserByID0_HTTP_Handler(srv BlogAdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SearchUserByIDReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/blog.admin.v1.BlogAdminService/SearchUserByID")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SearchUserByID(ctx, req.(*SearchUserByIDReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SearchUserByIDReply)
		return ctx.Result(200, reply)
	}
}

func _BlogAdminService_CreateUser0_HTTP_Handler(srv BlogAdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateUserReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/blog.admin.v1.BlogAdminService/CreateUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateUser(ctx, req.(*CreateUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateUserReply)
		return ctx.Result(200, reply)
	}
}

func _BlogAdminService_UpdateUser0_HTTP_Handler(srv BlogAdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateUserReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/blog.admin.v1.BlogAdminService/UpdateUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateUser(ctx, req.(*UpdateUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateUserReply)
		return ctx.Result(200, reply)
	}
}

func _BlogAdminService_GetUserList0_HTTP_Handler(srv BlogAdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserListReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/blog.admin.v1.BlogAdminService/GetUserList")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserList(ctx, req.(*GetUserListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserListReply)
		return ctx.Result(200, reply)
	}
}

func _BlogAdminService_Login0_HTTP_Handler(srv BlogAdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/blog.admin.v1.BlogAdminService/Login")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*LoginReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginReply)
		return ctx.Result(200, reply)
	}
}

func _BlogAdminService_Logout0_HTTP_Handler(srv BlogAdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LogoutReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/blog.admin.v1.BlogAdminService/Logout")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Logout(ctx, req.(*LogoutReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogoutReply)
		return ctx.Result(200, reply)
	}
}

func _BlogAdminService_Register0_HTTP_Handler(srv BlogAdminServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RegisterReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/blog.admin.v1.BlogAdminService/Register")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Register(ctx, req.(*RegisterReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RegisterReply)
		return ctx.Result(200, reply)
	}
}

type BlogAdminServiceHTTPClient interface {
	CreateUser(ctx context.Context, req *CreateUserReq, opts ...http.CallOption) (rsp *CreateUserReply, err error)
	DeleteUser(ctx context.Context, req *DeleteUserReq, opts ...http.CallOption) (rsp *DeleteUserReply, err error)
	GetUserList(ctx context.Context, req *GetUserListReq, opts ...http.CallOption) (rsp *GetUserListReply, err error)
	Login(ctx context.Context, req *LoginReq, opts ...http.CallOption) (rsp *LoginReply, err error)
	Logout(ctx context.Context, req *LogoutReq, opts ...http.CallOption) (rsp *LogoutReply, err error)
	Register(ctx context.Context, req *RegisterReq, opts ...http.CallOption) (rsp *RegisterReply, err error)
	SearchUserByID(ctx context.Context, req *SearchUserByIDReq, opts ...http.CallOption) (rsp *SearchUserByIDReply, err error)
	UpdateUser(ctx context.Context, req *UpdateUserReq, opts ...http.CallOption) (rsp *UpdateUserReply, err error)
}

type BlogAdminServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewBlogAdminServiceHTTPClient(client *http.Client) BlogAdminServiceHTTPClient {
	return &BlogAdminServiceHTTPClientImpl{client}
}

func (c *BlogAdminServiceHTTPClientImpl) CreateUser(ctx context.Context, in *CreateUserReq, opts ...http.CallOption) (*CreateUserReply, error) {
	var out CreateUserReply
	pattern := "/admin/user/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/blog.admin.v1.BlogAdminService/CreateUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BlogAdminServiceHTTPClientImpl) DeleteUser(ctx context.Context, in *DeleteUserReq, opts ...http.CallOption) (*DeleteUserReply, error) {
	var out DeleteUserReply
	pattern := "/admin/user/delete/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/blog.admin.v1.BlogAdminService/DeleteUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BlogAdminServiceHTTPClientImpl) GetUserList(ctx context.Context, in *GetUserListReq, opts ...http.CallOption) (*GetUserListReply, error) {
	var out GetUserListReply
	pattern := "/admin/user/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/blog.admin.v1.BlogAdminService/GetUserList"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BlogAdminServiceHTTPClientImpl) Login(ctx context.Context, in *LoginReq, opts ...http.CallOption) (*LoginReply, error) {
	var out LoginReply
	pattern := "/admin/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/blog.admin.v1.BlogAdminService/Login"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BlogAdminServiceHTTPClientImpl) Logout(ctx context.Context, in *LogoutReq, opts ...http.CallOption) (*LogoutReply, error) {
	var out LogoutReply
	pattern := "/admin/logout"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/blog.admin.v1.BlogAdminService/Logout"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BlogAdminServiceHTTPClientImpl) Register(ctx context.Context, in *RegisterReq, opts ...http.CallOption) (*RegisterReply, error) {
	var out RegisterReply
	pattern := "/admin/register"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/blog.admin.v1.BlogAdminService/Register"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BlogAdminServiceHTTPClientImpl) SearchUserByID(ctx context.Context, in *SearchUserByIDReq, opts ...http.CallOption) (*SearchUserByIDReply, error) {
	var out SearchUserByIDReply
	pattern := "/admin/user/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/blog.admin.v1.BlogAdminService/SearchUserByID"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BlogAdminServiceHTTPClientImpl) UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...http.CallOption) (*UpdateUserReply, error) {
	var out UpdateUserReply
	pattern := "/admin/user/{user.id}/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/blog.admin.v1.BlogAdminService/UpdateUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
